# バカラ・モンテカルロ法シミュレーター要件書

## 1. プロジェクト概要

このプロジェクトは、バカラゲームにおけるモンテカルロ法を用いたベッティング戦略のシミュレーションを行うReactアプリケーションです。ユーザーは初期投資額、初期残高、最大ラウンド数、シミュレーション回数を入力し、結果を確認することができます。

## 2. 技術スタック

- React.js
- Create React App
- Tailwind CSS

## 3. フォルダ構成

```
montecarlo-simulator/
│
├── public/
│   ├── index.html
│   ├── favicon.ico
│   └── manifest.json
│
├── src/
│   ├── App.js
│   ├── index.js
│   └── index.css
│
├── package.json
├── tailwind.config.js
└── README.md
```

## 4. セットアップ手順

1. 新しいCreate React Appプロジェクトを作成します：
   ```
   npx create-react-app montecarlo-simulator
   cd montecarlo-simulator
   ```

2. 必要な依存関係をインストールします：
   ```
   npm install tailwindcss@latest postcss@latest autoprefixer@latest
   ```

3. Tailwind CSSの設定ファイルを生成します：
   ```
   npx tailwindcss init -p
   ```

4. `tailwind.config.js`ファイルを以下のように編集します：
   ```javascript
   module.exports = {
     content: [
       "./src/**/*.{js,jsx,ts,tsx}",
     ],
     theme: {
       extend: {},
     },
     plugins: [],
   }
   ```

5. `src/index.css`ファイルを以下の内容で上書きします：
   ```css
   @import 'tailwindcss/base';
   @import 'tailwindcss/components';
   @import 'tailwindcss/utilities';
   ```

6. `src/App.js`ファイルを以下のコードで上書きします：

```javascript
import React, { useState } from 'react';

const generateInitialSequence = (initialInvestment) => {
  const base = Math.floor(initialInvestment / 4);
  return [base, base * 2, base * 3];
};

const baccaratMonteCarlo = (initialInvestment, initialBalance, maxRounds) => {
  let initialSequence = generateInitialSequence(initialInvestment);
  let sequence = [...initialSequence];
  let balance = initialBalance;

  for (let i = 0; i < maxRounds; i++) {
    if (balance <= 0) break;

    if (sequence.length === 0) {
      sequence = [...initialSequence];
    }

    let bet = sequence[0] + sequence[sequence.length - 1];
    if (bet > balance) bet = balance;

    balance -= bet;

    if (Math.random() < 0.5) { // Win
      balance += bet * 2;
      if (sequence.length > 1) {
        sequence = sequence.slice(1, -1);
      } else {
        sequence = [];
      }
    } else { // Lose
      sequence.push(bet);
    }
  }

  return balance;
};

const runSimulation = (initialInvestment, initialBalance, maxRounds, numSimulations) => {
  let finalBalances = [];
  let bankruptcies = 0;
  let belowInitial = 0;
  let profitableBalances = [];

  for (let i = 0; i < numSimulations; i++) {
    const finalBalance = baccaratMonteCarlo(initialInvestment, initialBalance, maxRounds);
    finalBalances.push(finalBalance);

    if (finalBalance === 0) bankruptcies++;
    if (finalBalance < initialBalance) belowInitial++;
    if (finalBalance > initialBalance) profitableBalances.push(finalBalance);
  }

  const avgFinalBalance = finalBalances.reduce((a, b) => a + b, 0) / numSimulations;
  const bankruptcyRate = (bankruptcies / numSimulations) * 100;
  const belowInitialRate = (belowInitial / numSimulations) * 100;
  const profitRate = (profitableBalances.length / numSimulations) * 100;
  const avgProfitableBalance = profitableBalances.length > 0 
    ? profitableBalances.reduce((a, b) => a + b, 0) / profitableBalances.length 
    : 0;
  const maxProfitableBalance = Math.max(...profitableBalances, 0);
  const minFinalBalance = Math.min(...finalBalances);

  return {
    avgFinalBalance,
    bankruptcyRate,
    belowInitialRate,
    profitRate,
    avgProfitableBalance,
    maxProfitableBalance,
    minFinalBalance
  };
};

const BaccaratSimulator = () => {
  const [initialInvestment, setInitialInvestment] = useState('4000');
  const [initialBalance, setInitialBalance] = useState('60000');
  const [maxRounds, setMaxRounds] = useState('50');
  const [numSimulations, setNumSimulations] = useState('10000');
  const [results, setResults] = useState(null);

  const handleSimulation = () => {
    const simulationResults = runSimulation(
      Number(initialInvestment),
      Number(initialBalance),
      Number(maxRounds),
      Number(numSimulations)
    );
    setResults(simulationResults);
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold mb-4">バカラ・モンテカルロ法シミュレーター</h1>
      
      <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4" role="alert">
        <p className="font-bold">注意</p>
        <p>このシミュレーターは教育目的のみで使用してください。実際のギャンブルでの使用はお勧めしません。</p>
      </div>

      <div className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
        <h2 className="text-2xl font-bold mb-4">パラメータ設定</h2>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block mb-2">初期投資額</label>
            <input
              type="text"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              value={initialInvestment}
              onChange={(e) => setInitialInvestment(e.target.value)}
            />
          </div>
          <div>
            <label className="block mb-2">初期残高</label>
            <input
              type="text"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              value={initialBalance}
              onChange={(e) => setInitialBalance(e.target.value)}
            />
          </div>
          <div>
            <label className="block mb-2">最大ラウンド数</label>
            <input
              type="text"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              value={maxRounds}
              onChange={(e) => setMaxRounds(e.target.value)}
            />
          </div>
          <div>
            <label className="block mb-2">シミュレーション回数</label>
            <input
              type="text"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              value={numSimulations}
              onChange={(e) => setNumSimulations(e.target.value)}
            />
          </div>
        </div>
        <button 
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline mt-4"
          onClick={handleSimulation}
        >
          シミュレーション実行
        </button>
      </div>

      {results && (
        <div className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
          <h2 className="text-2xl font-bold mb-4">シミュレーション結果</h2>
          <ul className="list-disc pl-5">
            <li>平均最終残高: {results.avgFinalBalance.toFixed(2)}</li>
            <li>破産確率: {results.bankruptcyRate.toFixed(2)}%</li>
            <li>元金を下回る確率: {results.belowInitialRate.toFixed(2)}%</li>
            <li>利益を出せる確率: {results.profitRate.toFixed(2)}%</li>
            <li>利益が出た場合の平均最終額: {results.avgProfitableBalance.toFixed(2)}</li>
            <li>利益が出た場合の最高額: {results.maxProfitableBalance.toFixed(2)}</li>
            <li>最終の最低残高: {results.minFinalBalance.toFixed(2)}</li>
          </ul>
        </div>
      )}
    </div>
  );
};

export default BaccaratSimulator;
```

7. `src/index.js`ファイルを以下のように編集します：
   ```javascript
   import React from 'react';
   import ReactDOM from 'react-dom/client';
   import './index.css';
   import BaccaratSimulator from './App';

   const root = ReactDOM.createRoot(document.getElementById('root'));
   root.render(
     <React.StrictMode>
       <BaccaratSimulator />
     </React.StrictMode>
   );
   ```

8. アプリケーションを起動します：
   ```
   npm start
   ```

## 5. 機能要件

1. ユーザーは以下のパラメータを入力できます：
   - 初期投資額
   - 初期残高
   - 最大ラウンド数
   - シミュレーション回数

2. "シミュレーション実行"ボタンをクリックすると、入力されたパラメータに基づいてシミュレーションが実行されます。

3. シミュレーション結果は以下の情報を含みます：
   - 平均最終残高
   - 破産確率
   - 元金を下回る確率
   - 利益を出せる確率
   - 利益が出た場合の平均最終額
   - 利益が出た場合の最高額
   - 最終の最低残高

4. 入力フィールドは文字列として扱われ、ユーザーは値を完全に消去して再入力することができます。

5. シミュレーション実行時に、入力された文字列は数値に変換されます。

## 6. 非機能要件

1. アプリケーションはレスポンシブデザインで、様々な画面サイズに対応します。

2. Tailwind CSSを使用してスタイリングを行い、モダンで見やすいUIを提供します。

3. シミュレーション実行時の計算は効率的に行われ、ユーザーに過度の待ち時間を感じさせないようにします。

## 7. デプロイ

GitHub Pagesを使用してアプリケーションをデプロイする場合は、以下の手順を実行します：

1. `package.json`ファイルに以下のスクリプトを追加します：
   ```json
   "scripts": {
     "predeploy": "npm run build",
     "deploy": "gh-pages -d build",
     ...
   }
   ```

2. GitHub Pagesのデプロイメント用パッケージをインストールします：
   ```
   npm install gh-pages --save-dev
   ```

3. `package.json`ファイルに`homepage`フィールドを追加します：
   ```json
   {
     "homepage": "https://yourusername.github.io/montecarlo-simulator",
     ...
   }
   ```

4. アプリケーションをビルドしてデプロイします：
   ```
   npm run deploy
   ```

以上の要件に従ってアプリケーションを実装することで、バカラ・モンテカルロ法シミュレーターを再現することができます。